{% extends 'base.html.twig' %}

{% block title %}Hello ApiController!{% endblock %}

{% block body %}

<nav class="w-full flex text-sm" aria-label="Breadcrumb">
    <ol class="inline-flex items-center space-x-1 md:space-x-2 rtl:space-x-reverse">
        <li class="inline-flex items-center">
            <a href="{{ path('app_home') }}" class="inline-flex items-center text-black dark:text-white hover:text-indigo-800 dark:hover:text-indigo-200">
                <svg class="w-3 h-3 me-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                    <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
                </svg>
                Home
            </a>
        </li>
        <li aria-current="Games">
            <div class="flex items-center">
                <svg class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                </svg>
                <span class="ms-1 md:ms-2 text-black dark:text-white underline">Games</span>
            </div>
        </li>
    </ol>
</nav>

<section id="game" class="w-full">

    <div>
        <h1 class="text-3xl text-black dark:text-white font-raleway font-bold pr-3">Welcome to the accessibility gamelist</h1>
        <hr class="my-3 w-[100%] border-t-2 border-amber-800 dark:border-yellow-200" />
    </div>

    {% for flash_message in app.flashes('warning') %}
    <div class="alert alert-warning bg-red-500 text-center text-black rounded-lg px-8">
        {{ flash_message }}
    </div>
    {% endfor %}

    {% set uniqueGenres = [] %}
    {% for game in games %}
        {% for genre in game.api.genres %}
            {% if genre.name not in uniqueGenres %}
                {% set uniqueGenres = uniqueGenres|merge([genre.name]) %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    <div id="genres" class="flex flex-row mb-1 items-center">
        {% for genreName in uniqueGenres %}
            <label for="{{ genreName }}">{{ genreName }}</label>
            <input id="{{ genreName }}" type="checkbox" name="genre" value="{{ genreName }}">
        {% endfor %}
    </div>
    
    <br>
    <br>
    <br>

    {% set uniquePlatforms = [] %}
    {% for game in games %}
        {% for platform in game.api.platforms %}
            {% if platform.name not in uniquePlatforms %}
                {% set uniquePlatforms = uniquePlatforms|merge([platform.name]) %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    <div id="platforms" class="flex flex-row mb-1 items-center">
        {% for platformName in uniquePlatforms %}
            <label for="{{ platformName }}">{{ platformName }}</label>
            <input id="{{ platformName }}" type="checkbox" name="platform" value="{{ platformName }}">
        {% endfor %}
    </div>

    <br>
    <br>
    <br>

    {% set uniqueDisabilities = [] %}
    {% for game in games %}
        {% for disability in game.uniqueDisabilities %}
            {% if disability.name not in uniqueDisabilities %}
                {% set uniqueDisabilities = uniqueDisabilities|merge([disability.name]) %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    <div id="disabilities" class="flex flex-row mb-1 items-center">
        {% for disabilityName in uniqueDisabilities %}
            <label for="{{ disabilityName }}">{{ disabilityName }}</label>
            <input id="{{ disabilityName }}" type="checkbox" name="disability" value="{{ disabilityName }}">
        {% endfor %}
    </div>

    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
        <table id="dataTable1" class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400" width="100%">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                <tr>
                    <th scope="col" class="px-6 py-3 w-[35%]">Game</th>
                    <th scope="col" class="px-6 py-3 w-[20%]">Developer</th>
                    <th scope="col" class="px-6 py-3 w-[20%]">Genres</th>
                    <th scope="col" class="px-6 py-3 w-[20%]">Platforms</th>
                    <th scope="col" class="px-6 py-3 w-[5%]">Disability</th>
                </tr>
            </thead>
            <tbody>
                {% for game in games %}
                <tr>
                    <th scope="row" class="px-6 py-4">
                        <div class="flex flex-row items-center gap-5 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                            <div class="flex-shrink-0">
                                <a href="{{ path('show_game', {'id': game.db.id, 'slug':game.db.slug}) }}"><img src="https://images.igdb.com/igdb/image/upload/t_thumb/{{ game.api.cover.image_id }}.jpg" alt="" class="w-20 h-10 object-cover"></a>
                            </div>
                            <div class="flex-grow min-w-0">
                                <a href="{{ path('show_game', {'id': game.db.id, 'slug':game.db.slug}) }}"><p class="truncate">{{ game.api.name }}</p></a>
                            </div>
                        </div>
                    </th>
                    <td class="px-6 py-4">{% for developer in game.api.developers %} {{ developer }} {% endfor %}</td>
                    <td class="px-6 py-4">{% for genre in game.api.genres %} {{ genre.name }} {% endfor %}</td>
                    <td class="px-6 py-4">{% for platform in game.api.platforms %} {{ platform.name }} {% endfor %}</td>
                    <td class="px-6 py-4">
                        <div class="flex gap-1">
                            {% for disability in game.uniqueDisabilities %}
                                <img src="{{ disability.icon }}" alt="{{ disability }}'s icon" value="{{ disability }}" title="{{ disability }}" width="25" height="25" data-disability="{{ disability }}">
                            {% endfor %}
                        </div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

</section>

<script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
<script src="https://cdn.datatables.net/v/dt/jq-3.7.0/dt-2.0.8/datatables.min.js"></script>
<script src="https://cdn.datatables.net/responsive/3.0.2/js/dataTables.responsive.min.js"></script>

<script>
    // Je commence par vérifier si un genre est sélectionné
    $(document).ready(function () {
        $.fn.dataTable.ext.search.push(
            function (settings, searchData, index, rowData, counter) {
                var selectedGenres = $('input:checkbox[name="genre"]:checked').map(function () {
                    return this.value;
                }).get();

                // Si aucun genre n'est sélectionné, je retourne true pour afficher toutes les lignes
                if (selectedGenres.length === 0) {
                    return true;
                }

                // Ici, searchData[2] devrait contenir la liste des genres du jeu, séparés par une virgule, un espace, ou tout autre séparateur non ambigu
                var gameGenres = searchData[2]; // Ajustez l'index selon votre structure de données

                // Je vérifie si au moins un des genres sélectionnés est présent dans les genres du jeu
                return selectedGenres.every(selectedGenre => gameGenres.includes(selectedGenre));
            }
        );

        $.fn.dataTable.ext.search.push(
            function (settings, searchData, index, rowData, counter) {
                var selectedPlatforms = $('input:checkbox[name="platform"]:checked').map(function () {
                    return this.value;
                }).get();

                if (selectedPlatforms.length === 0) {
                    return true;
                }

                var gamePlatforms = searchData[3];

                return selectedPlatforms.every(selectedPlatform => gamePlatforms.includes(selectedPlatform));
            }
        );

        $.fn.dataTable.ext.search.push(
            function (settings, searchData, index, rowData, counter) {
                var selectedDisabilities = $('input:checkbox[name="disability"]:checked').map(function () {
                    return this.value;
                }).get();

                if (selectedDisabilities.length === 0) {
                    return true;
                }

                var $cell = $(table.cell(index, 4).node());
                var gameDisabilities = $cell.find('img').map(function () {
                    return $(this).data('disability');
                }).get();

                return selectedDisabilities.every(selectedDisability => gameDisabilities.includes(selectedDisability));
            }
        );

        // J'initialise la table DataTable avec les options de responsive
        var table = $('#dataTable1').DataTable({
            responsive: true
        });

        // J'ajoute un écouteur d'événement sur les cases à cocher pour mettre à jour la table lorsqu'un genre est sélectionné ou désélectionné
        $('input:checkbox').on('change', function () {
            table.draw();
        });
    });
</script>

{% endblock %}