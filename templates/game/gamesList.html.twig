{% extends 'base.html.twig' %}

{% block title %}Hello ApiController!{% endblock %}

{% block body %}

{# Breadcrumb #}
<nav class="w-full flex text-sm" aria-label="Breadcrumb">
    <ol class="inline-flex items-center space-x-1 md:space-x-2 rtl:space-x-reverse">
        <li class="inline-flex items-center">
            <a href="{{ path('app_home') }}" class="inline-flex items-center text-black dark:text-white hover:text-indigo-800 dark:hover:text-indigo-200">
                <svg class="w-3 h-3 me-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                    <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
                </svg>
                Home
            </a>
        </li>
        <li aria-current="Games">
            <div class="flex items-center">
                <svg class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                </svg>
                <span class="ms-1 md:ms-2 text-black dark:text-white underline">Games</span>
            </div>
        </li>
    </ol>
</nav>

{# En-tÃªte #}
<section id="game" class="w-full">

    <div>
        <h1 class="text-3xl text-black dark:text-white font-raleway font-bold pr-3">Welcome to the accessibility games list</h1>
        <hr class="my-3 w-[100%] border-t-2 border-amber-800 dark:border-yellow-200" />
    </div>

    {# Tabs section #}
    <div class="tab-section rounded-lg p-2 mb-5 w-full bg-white dark:bg-neutral-800 shadow-[rgba(50,50,93,0.25)_0px_6px_12px_-2px,_rgba(0,0,0,0.3)_0px_3px_7px_-3px]">
        <div class="flex">
            {# Genres #}
            <button class="px-4 py-2 font-medium flex items-center hover:text-indigo-800 dark:hover:text-indigo-200" data-tab-target="#tab1">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 512 512" width="20" height="20" xmlns="http://www.w3.org/2000/svg">
                    <path d="M192 104.8c0-9.2-5.8-17.3-13.2-22.8C167.2 73.3 160 61.3 160 48c0-26.5 28.7-48 64-48s64 21.5 64 48c0 13.3-7.2 25.3-18.8 34c-7.4 5.5-13.2 13.6-13.2 22.8c0 12.8 10.4 23.2 23.2 23.2H336c26.5 0 48 21.5 48 48v56.8c0 12.8 10.4 23.2 23.2 23.2c9.2 0 17.3-5.8 22.8-13.2c8.7-11.6 20.7-18.8 34-18.8c26.5 0 48 28.7 48 64s-21.5 64-48 64c-13.3 0-25.3-7.2-34-18.8c-5.5-7.4-13.6-13.2-22.8-13.2c-12.8 0-23.2 10.4-23.2 23.2V464c0 26.5-21.5 48-48 48H279.2c-12.8 0-23.2-10.4-23.2-23.2c0-9.2 5.8-17.3 13.2-22.8c11.6-8.7 18.8-20.7 18.8-34c0-26.5-28.7-48-64-48s-64 21.5-64 48c0 13.3 7.2 25.3 18.8 34c7.4 5.5 13.2 13.6 13.2 22.8c0 12.8-10.4 23.2-23.2 23.2H48c-26.5 0-48-21.5-48-48V343.2C0 330.4 10.4 320 23.2 320c9.2 0 17.3 5.8 22.8 13.2C54.7 344.8 66.7 352 80 352c26.5 0 48-28.7 48-64s-21.5-64-48-64c-13.3 0-25.3 7.2-34 18.8C40.5 250.2 32.4 256 23.2 256C10.4 256 0 245.6 0 232.8V176c0-26.5 21.5-48 48-48H168.8c12.8 0 23.2-10.4 23.2-23.2z"/>
                </svg>
                Genres
            </button>

            {# Platforms #}
            <button class="px-4 py-2 font-medium flex items-center text-black dark:text-white hover:text-indigo-800 dark:hover:text-indigo-200" data-tab-target="#tab2">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 640 512" xmlns="http://www.w3.org/2000/svg">
                    <path d="M192 64C86 64 0 150 0 256S86 448 192 448H448c106 0 192-86 192-192s-86-192-192-192H192zM496 168a40 40 0 1 1 0 80 40 40 0 1 1 0-80zM392 304a40 40 0 1 1 80 0 40 40 0 1 1 -80 0zM168 200c0-13.3 10.7-24 24-24s24 10.7 24 24v32h32c13.3 0 24 10.7 24 24s-10.7 24-24 24H216v32c0 13.3-10.7 24-24 24s-24-10.7-24-24V280H136c-13.3 0-24-10.7-24-24s10.7-24 24-24h32V200z"/>
                </svg>
                Platforms
            </button>

            {# Disabilities #}
            <button class="px-4 py-2 font-medium flex items-center text-black dark:text-white hover:text-indigo-800 dark:hover:text-indigo-200" data-tab-target="#tab3">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 448 512" width="20" height="20" xmlns="http://www.w3.org/2000/svg">
                    <path d="M320 48a48 48 0 1 1 96 0 48 48 0 1 1 -96 0zM204.5 121.3c-5.4-2.5-11.7-1.9-16.4 1.7l-40.9 30.7c-14.1 10.6-34.2 7.7-44.8-6.4s-7.7-34.2 6.4-44.8l40.9-30.7c23.7-17.8 55.3-21 82.1-8.4l90.4 42.5c29.1 13.7 36.8 51.6 15.2 75.5L299.1 224h97.4c30.3 0 53 27.7 47.1 57.4L415.4 422.3c-3.5 17.3-20.3 28.6-37.7 25.1s-28.6-20.3-25.1-37.7L377 288H306.7c8.6 19.6 13.3 41.2 13.3 64c0 88.4-71.6 160-160 160S0 440.4 0 352s71.6-160 160-160c11.1 0 22 1.1 32.4 3.3l54.2-54.2-42.1-19.8zM160 448a96 96 0 1 0 0-192 96 96 0 1 0 0 192z"/>
                </svg>
                Disabilities
            </button>
        </div>

        <hr class="my-3 w-[100%] border-t-1 border-black/50 dark:border-white/80" />

        {# Filters #}
        <div class="my-5">

            {# Genres tab #}
            <div id="tab1" class="tab-content hidden">
                <div id="genres" class="flex flex-wrap items-center gap-4 justify-center">
                    {% set uniqueGenres = [] %}
                    {% for game in games %}
                        {% for genre in game.api.genres %}
                            {% if genre.name not in uniqueGenres %}
                                {% set uniqueGenres = uniqueGenres|merge([genre.name]) %}
                            {% endif %}
                        {% endfor %}
                    {% endfor %}
                    {% for genreName in uniqueGenres %}
                        <div>
                            <input type="checkbox" id="{{ genreName }}" name="genre" value="{{ genreName }}" class="hidden peer" />
                            <label for="{{ genreName }}" class="select-none cursor-pointer flex items-center justify-center rounded-xl border-2 border-black/80 dark:border-white/80 py-2 px-4 text-black dark:text-white peer-checked:bg-indigo-800 peer-checked:text-white peer-checked:border-indigo-800 dark:peer-checked:bg-indigo-200 dark:peer-checked:text-black dark:peer-checked:border-indigo-200 hover:bg-indigo-200 dark:hover:bg-indigo-800">
                                <span>{{ genreName }}</span>
                            </label>
                        </div>
                    {% endfor %}
                </div>
            </div>

            {# Platforms tab #}
            <div id="tab2" class="tab-content hidden">
                <div id="platforms" class="flex flex-wrap items-center gap-4 justify-center">
                    {% set uniquePlatforms = [] %}
                    {% for game in games %}
                        {% for platform in game.api.platforms %}
                            {% if platform.name not in uniquePlatforms %}
                                {% set uniquePlatforms = uniquePlatforms|merge([platform.name]) %}
                            {% endif %}
                        {% endfor %}
                    {% endfor %}
                    {% for platformName in uniquePlatforms %}
                        <div>
                            <input type="checkbox" id="{{ platformName }}" name="platform" value="{{ platformName }}" class="hidden peer" />
                            <label for="{{ platformName }}" class="select-none cursor-pointer flex items-center justify-center rounded-xl border-2 border-black/80 dark:border-white/80 py-2 px-4 text-black dark:text-white peer-checked:bg-indigo-800 peer-checked:text-white peer-checked:border-indigo-800 dark:peer-checked:bg-indigo-200 dark:peer-checked:text-black dark:peer-checked:border-indigo-200 hover:bg-indigo-200 dark:hover:bg-indigo-800">
                                <span>{{ platformName }}</span>
                            </label>
                        </div>
                    {% endfor %}
                </div>
            </div>

            {# Disabilities tab #}
            <div id="tab3" class="tab-content hidden">
                <div id="disabilities" class="flex flex-wrap items-center gap-4 justify-center">
                    {% set uniqueDisabilities = [] %}
                    {% for game in games %}
                        {% for disability in game.uniqueDisabilities %}
                            {% if disability.name not in uniqueDisabilities %}
                                {% set uniqueDisabilities = uniqueDisabilities|merge([disability.name]) %}
                            {% endif %}
                        {% endfor %}
                    {% endfor %}
                    {% for disabilityName in uniqueDisabilities %}
                        <div>
                            <input type="checkbox" id="{{ disabilityName }}" name="disability" value="{{ disabilityName }}" class="hidden peer" />
                            <label for="{{ disabilityName }}" class="select-none cursor-pointer flex items-center justify-center rounded-xl border-2 border-black/80 dark:border-white/80 py-2 px-4 text-black dark:text-white peer-checked:bg-indigo-800 peer-checked:text-white peer-checked:border-indigo-800 dark:peer-checked:bg-indigo-200 dark:peer-checked:text-black dark:peer-checked:border-indigo-200 hover:bg-indigo-200 dark:hover:bg-indigo-800">
                                <span>{{ disabilityName }}</span>
                            </label>
                        </div>
                    {% endfor %}
                </div>
            </div>

        </div>

        <hr class="my-3 w-[100%] border-t-1 border-black/50 dark:border-white/80" />

        {# Selected filters #}
        <div class="relative mx-2">
            <div id="selected-filters-head">
                <p class="text-black dark:text-white mb-3">Selected filters :</p>
                <button id="reset-filters" class="absolute top-0 right-0">
                    <svg class="w-5 h-5 mr-2 fill-black dark:fill-white hover:fill-indigo-800 dark:hover:fill-indigo-200" fill="currentColor" viewBox="0 0 576 512" xmlns="http://www.w3.org/2000/svg"><path d="M290.7 57.4L57.4 290.7c-25 25-25 65.5 0 90.5l80 80c12 12 28.3 18.7 45.3 18.7H288h9.4H512c17.7 0 32-14.3 32-32s-14.3-32-32-32H387.9L518.6 285.3c25-25 25-65.5 0-90.5L381.3 57.4c-25-25-65.5-25-90.5 0zM297.4 416H288l-105.4 0-80-80L227.3 211.3 364.7 348.7 297.4 416z"/></svg>
                </button>
            </div>
            <div id="selected-filters">
                {# Selected filters will be displayed here #}
            </div>
        </div>

    </div>

    {% for flash_message in app.flashes('warning') %}
    <div class="alert alert-warning bg-red-500 text-center text-black rounded-lg px-8">
        {{ flash_message }}
    </div>
    {% endfor %}

    {# Liste des jeux #}
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
        <table id="dataTable1" class="w-full text-sm text-left rtl:text-right text-black dark:text-white stripe hover row-border order-column" width="100%">
            {# En-tÃªte du tableau #}
            <thead class="text-xs uppercase text-white dark:text-black bg-indigo-800 dark:bg-indigo-200">
                <tr>
                    <th scope="col" class="px-6 py-3 w-[30%]">Games</th>
                    <th scope="col" class="px-6 py-3 w-[17%]">Developers</th>
                    <th scope="col" class="px-6 py-3 w-[20%]">Genres</th>
                    <th scope="col" class="px-6 py-3 w-[20%]">Platforms</th>
                    <th scope="col" class="px-6 py-3 w-[13%]">Disabilities</th>
                </tr>
            </thead>
            {# Pied de tableau #}
            <tfoot>
                <tr>
                    <th scope="col" class="px-6 py-3">Games</th>
                    <th scope="col" class="px-6 py-3">Developers</th>
                    <th scope="col" class="px-6 py-3">Genres</th>
                    <th scope="col" class="px-6 py-3">Platforms</th>
                    <th scope="col" class="px-6 py-3">Disabilities</th>
                </tr>
            </tfoot>
            {# Corps du tableau #}
            <tbody class="bg-white dark:bg-neutral-800">
                {% for game in games %}
                <tr>
                    <td scope="row" class="px-6 py-4">
                        <div class="flex flex-row items-center gap-5 font-bold whitespace-nowrap">
                            <div class="flex-shrink-0">
                                <a href="{{ path('show_game', {'id': game.db.id, 'slug':game.db.slug}) }}"><img src="https://images.igdb.com/igdb/image/upload/t_thumb/{{ game.api.cover.image_id }}.jpg" alt="" class="w-20 h-10 object-cover"></a>
                            </div>
                            <div class="flex-grow min-w-0">
                                <a href="{{ path('show_game', {'id': game.db.id, 'slug':game.db.slug}) }}"><p class="truncate">{{ game.api.name }}</p></a>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4">{% for developer in game.api.developers %} {{ developer }} {% endfor %}</td>
                    <td class="px-6 py-4">{% for genre in game.api.genres %} {{ genre.name }} {% endfor %}</td>
                    <td class="px-6 py-4">{% for platform in game.api.platforms %} {{ platform.name }} {% endfor %}</td>
                    <td class="px-6 py-4">
                        <div class="flex gap-1">
                            {% for disability in game.uniqueDisabilities %}
                                <img src="{{ disability.icon }}" alt="{{ disability }}'s icon" value="{{ disability }}" title="{{ disability }}" width="25" height="25" data-disability="{{ disability }}" class="dark:invert dark:brightness-0 dark:filter">
                            {% endfor %}
                        </div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

</section>

<script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
<script src="https://cdn.datatables.net/v/dt/jq-3.7.0/dt-2.0.8/datatables.min.js"></script>
<script src="https://cdn.datatables.net/responsive/3.0.2/js/dataTables.responsive.min.js"></script>

<script>
    $(document).ready(function () {
        // Je dÃ©clare une constante pour le conteneur des filtres sÃ©lectionnÃ©s
        const selectedFilters = document.getElementById('selected-filters');
        const selectedFiltersP = document.getElementById('selected-filters-head');
        const resetFilters = document.getElementById('reset-filters');
        
        // Je dÃ©finis une fonction pour mettre Ã  jour l'affichage des filtres sÃ©lectionnÃ©s
        function updateSelectedFilters() {
            // Je rÃ©cupÃ¨re les genres sÃ©lectionnÃ©s
            var selectedGenres = $('input:checkbox[name="genre"]:checked').map(function () {
                return this.value;
            }).get();
            // Je rÃ©cupÃ¨re les plateformes sÃ©lectionnÃ©es
            var selectedPlatforms = $('input:checkbox[name="platform"]:checked').map(function () {
                return this.value;
            }).get();
            // Je rÃ©cupÃ¨re les handicaps sÃ©lectionnÃ©s
            var selectedDisabilities = $('input:checkbox[name="disability"]:checked').map(function () {
                return this.value;
            }).get();
            
            // Si aucun genre, ni aucune plateforme ni aucun handicap n'est sÃ©lectionnÃ©, je vide le conteneur des filtres
            if (selectedGenres.length === 0 && selectedPlatforms.length === 0 && selectedDisabilities.length === 0) {
                selectedFiltersP.classList.add('hidden');
                selectedFilters.innerHTML = '';
            } else {
                selectedFiltersP.classList.remove('hidden');
                // Sinon, j'affiche les filtres genres, plateformes et handicaps sÃ©lectionnÃ©s
                // J'affiche les genres sous forme de badges
                selectedFilters.innerHTML = selectedGenres.map(genre => 
                    `<div class="inline-block bg-indigo-800 dark:bg-indigo-200 text-white dark:text-black rounded-full px-3 py-1 text-xs font-semibold mr-2 mb-2">
                        <div class="flex content-center">
                            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 512 512" width="20" height="20" xmlns="http://www.w3.org/2000/svg">
                                <path d="M192 104.8c0-9.2-5.8-17.3-13.2-22.8C167.2 73.3 160 61.3 160 48c0-26.5 28.7-48 64-48s64 21.5 64 48c0 13.3-7.2 25.3-18.8 34c-7.4 5.5-13.2 13.6-13.2 22.8c0 12.8 10.4 23.2 23.2 23.2H336c26.5 0 48 21.5 48 48v56.8c0 12.8 10.4 23.2 23.2 23.2c9.2 0 17.3-5.8 22.8-13.2c8.7-11.6 20.7-18.8 34-18.8c26.5 0 48 28.7 48 64s-21.5 64-48 64c-13.3 0-25.3-7.2-34-18.8c-5.5-7.4-13.6-13.2-22.8-13.2c-12.8 0-23.2 10.4-23.2 23.2V464c0 26.5-21.5 48-48 48H279.2c-12.8 0-23.2-10.4-23.2-23.2c0-9.2 5.8-17.3 13.2-22.8c11.6-8.7 18.8-20.7 18.8-34c0-26.5-28.7-48-64-48s-64 21.5-64 48c0 13.3 7.2 25.3 18.8 34c7.4 5.5 13.2 13.6 13.2 22.8c0 12.8-10.4 23.2-23.2 23.2H48c-26.5 0-48-21.5-48-48V343.2C0 330.4 10.4 320 23.2 320c9.2 0 17.3 5.8 22.8 13.2C54.7 344.8 66.7 352 80 352c26.5 0 48-28.7 48-64s-21.5-64-48-64c-13.3 0-25.3 7.2-34 18.8C40.5 250.2 32.4 256 23.2 256C10.4 256 0 245.6 0 232.8V176c0-26.5 21.5-48 48-48H168.8c12.8 0 23.2-10.4 23.2-23.2z"/>
                            </svg>
                            <span>${genre}</span>
                        </div>
                    </div>`
                ).join('');
                // J'affiche les plateformes sous forme de badges
                selectedFilters.innerHTML += selectedPlatforms.map(platform => 
                `<div class="inline-block bg-indigo-800 dark:bg-indigo-200 text-white dark:text-black rounded-full px-3 py-1 text-xs font-semibold mr-2 mb-2">
                    <div class="flex content-center">
                        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 640 512" xmlns="http://www.w3.org/2000/svg">
                            <path d="M192 64C86 64 0 150 0 256S86 448 192 448H448c106 0 192-86 192-192s-86-192-192-192H192zM496 168a40 40 0 1 1 0 80 40 40 0 1 1 0-80zM392 304a40 40 0 1 1 80 0 40 40 0 1 1 -80 0zM168 200c0-13.3 10.7-24 24-24s24 10.7 24 24v32h32c13.3 0 24 10.7 24 24s-10.7 24-24 24H216v32c0 13.3-10.7 24-24 24s-24-10.7-24-24V280H136c-13.3 0-24-10.7-24-24s10.7-24 24-24h32V200z"/>
                        </svg>
                        <span>${platform}</span>
                    </div>
                </div>`
                ).join('');
                // J'affiche les handicaps sous forme de badges
                selectedFilters.innerHTML += selectedDisabilities.map(disability => 
                `<div class="inline-block bg-indigo-800 dark:bg-indigo-200 text-white dark:text-black rounded-full px-3 py-1 text-xs font-semibold mr-2 mb-2">
                    <div class="flex content-center">
                        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 448 512" width="20" height="20" xmlns="http://www.w3.org/2000/svg">
                            <path d="M320 48a48 48 0 1 1 96 0 48 48 0 1 1 -96 0zM204.5 121.3c-5.4-2.5-11.7-1.9-16.4 1.7l-40.9 30.7c-14.1 10.6-34.2 7.7-44.8-6.4s-7.7-34.2 6.4-44.8l40.9-30.7c23.7-17.8 55.3-21 82.1-8.4l90.4 42.5c29.1 13.7 36.8 51.6 15.2 75.5L299.1 224h97.4c30.3 0 53 27.7 47.1 57.4L415.4 422.3c-3.5 17.3-20.3 28.6-37.7 25.1s-28.6-20.3-25.1-37.7L377 288H306.7c8.6 19.6 13.3 41.2 13.3 64c0 88.4-71.6 160-160 160S0 440.4 0 352s71.6-160 160-160c11.1 0 22 1.1 32.4 3.3l54.2-54.2-42.1-19.8zM160 448a96 96 0 1 0 0-192 96 96 0 1 0 0 192z"/>
                        </svg>
                        <span>${disability}</span>
                    </div>
                </div>`
                ).join('');
            }
        }
    
        // J'ajoute un Ã©couteur d'Ã©vÃ©nements sur les checkboxes des genres
        $('input:checkbox[name="genre"]').on('change', function() {
            // Je mets Ã  jour les filtres affichÃ©s
            updateSelectedFilters();
            // Je redessine la table pour appliquer les filtres
            table.draw();
        });
    
        // J'ajoute une fonction de recherche personnalisÃ©e pour les genres
        $.fn.dataTable.ext.search.push(
            function (settings, searchData, index, rowData, counter) {
                // Je rÃ©cupÃ¨re les genres sÃ©lectionnÃ©s
                var selectedGenres = $('input:checkbox[name="genre"]:checked').map(function () {
                    return this.value;
                }).get();
    
                // Si aucun genre n'est sÃ©lectionnÃ©, j'affiche toutes les lignes
                if (selectedGenres.length === 0) {
                    return true;
                }
    
                // Je rÃ©cupÃ¨re les genres du jeu dans le tableau de donnÃ©es
                var gameGenres = searchData[2];
                // Je vÃ©rifie si tous les genres sÃ©lectionnÃ©s sont prÃ©sents dans les genres du jeu dans le tableau de donnÃ©es
                return selectedGenres.every(selectedGenre => gameGenres.includes(selectedGenre));
            }
        );
    
        // J'ajoute un Ã©couteur d'Ã©vÃ©nements sur les checkboxes des plateformes
        $('input:checkbox[name="platform"]').on('change', function() {
            // Je mets Ã  jour les filtres affichÃ©s
            updateSelectedFilters();
            // Je redessine la table pour appliquer les filtres
            table.draw();
        });
    
        // J'ajoute une fonction de recherche personnalisÃ©e pour les plateformes
        $.fn.dataTable.ext.search.push(
            function (settings, searchData, index, rowData, counter) {
                // Je rÃ©cupÃ¨re les plateformes sÃ©lectionnÃ©es
                var selectedPlatforms = $('input:checkbox[name="platform"]:checked').map(function () {
                    return this.value;
                }).get();
    
                // Si aucune plateforme n'est sÃ©lectionnÃ©e, j'affiche toutes les lignes
                if (selectedPlatforms.length === 0) {
                    return true;
                }
    
                // Je rÃ©cupÃ¨re les plateformes du jeu dans le tableau de donnÃ©es
                var gamePlatforms = searchData[3];
    
                // Je vÃ©rifie si toutes les plateformes sÃ©lectionnÃ©es sont prÃ©sentes pour le jeu dans le tableau de donnÃ©es
                return selectedPlatforms.every(selectedPlatform => gamePlatforms.includes(selectedPlatform));
            }
        );
    
        // J'ajoute un Ã©couteur d'Ã©vÃ©nements sur les checkboxes des handicaps
        $('input:checkbox[name="disability"]').on('change', function() {
            // Je mets Ã  jour les filtres affichÃ©s
            updateSelectedFilters();
            // Je redessine la table pour appliquer les filtres
            table.draw();
        });
    
        // J'ajoute une fonction de recherche personnalisÃ©e pour les handicaps
        $.fn.dataTable.ext.search.push(
            function (settings, searchData, index, rowData, counter) {
                // Je rÃ©cupÃ¨re les handicaps sÃ©lectionnÃ©s
                var selectedDisabilities = $('input:checkbox[name="disability"]:checked').map(function () {
                    return this.value;
                }).get();
    
                // Si aucun handicap n'est sÃ©lectionnÃ©, j'affiche toutes les lignes
                if (selectedDisabilities.length === 0) {
                    return true;
                }
    
                // Je rÃ©cupÃ¨re la cellule contenant les handicaps du jeu Ã  partir de l'index de la ligne
                var $cell = $(table.cell(index, 4).node());
                // Je rÃ©cupÃ¨re les handicaps du jeu Ã  partir des attributs data des images dans la cellule
                var gameDisabilities = $cell.find('img').map(function () {
                    return $(this).data('disability');
                }).get();
    
                // Je vÃ©rifie si tous les handicaps sÃ©lectionnÃ©s sont prÃ©sents pour le jeu dans le tableau de donnÃ©es
                return selectedDisabilities.every(selectedDisability => gameDisabilities.includes(selectedDisability));
            }
        );

        // J'ajoute un Ã©couteur d'Ã©vÃ©nements sur le bouton de rÃ©initialisation des filtres
        resetFilters.addEventListener('click', function() {
            // Je dÃ©coche toutes les cases Ã  cocher
            $('input:checkbox').prop('checked', false);
            // Je mets Ã  jour les filtres affichÃ©s
            updateSelectedFilters();
            // Je redessine la table pour appliquer les filtres
            table.draw();
        });
    
        // J'initialise la table DataTables avec l'option responsive
        var table = $('#dataTable1').DataTable({
            responsive: true
        });
    
        // J'appelle la fonction pour afficher correctement les filtres au chargement initial de la page
        updateSelectedFilters();
    });
</script>

<script src="{{ asset('js/tabs.js') }}"></script>

{% endblock %}